Flutter Commands:
    1. flutter create project
    2. flutter run
    3. flutter pub get
    4. flutter pub upgrade
    5. flutter test
    6. flutter pub outdated
    7. flutter --help --verbose
    8. flutter analyze -d <DEVICE_ID>


Flutter run key commands.
    r Hot reload. 
    R Hot restart.
    h Repeat this help message.
    d Detach (terminate "flutter run" but leave application running).
    c Clear the screen
    q Quit (terminate the application on the device)


Flutter Architecture:
    1. Widgets - Primary Component
    2. Concept of State
    3. Layers
    4. Gestures


Widgets: 
    combination of widgets becomes an application. root(starts) - our own widgets - MaterialApp Widgets- Scaffold Widget (UI components)
    appBar, Body. binding into a common object that will create a page.

    Flow: MyApp (root) - MaterialApp - Pages - Scaffold (AppBar, Body)

Layers:
    Hierarchial data - (list1, list2, ....) - buiit on top of another
    Topmost Layer - Based on Operating System
    Second Layer - UI components, state management, gestures
    third Layer - Rendering into the output

    Flow: Platform based widgets - Widgets - Rendering - Output

Gestures:
    tap, swipe, drag

State (Stateful & Stateless Widgets):
    1. Stateless Widget: immutable - this data can't be changed; on run time we can't re-draw it.
        - extends StatelessWidget{
            const Page({Key key}), 
            
            @override
            Widget build(BuildContext context){
                return Container(
                /// UI components - static
                );
            }
            }
        - Button, icon, Text --- internal state to be changed dynamically
    
    2. Stateful Widget: mutable (dynamic data process via API, data, file access, local list)
        - Button with action, 
        
        class OwnWidget extends StatefulWidget{
            @override
            _OwnWidgetState createState() => _OwnWidgetState();            
        }

        class _OwnWidgetState extends State<OwnWidget>{
            @override
            Widget build(BuildContext context){
                return Container(
                    // UI components - dynamic
                );
            }
        }




// stful, stless, stanim






Row(children:) -- Column(): crossAxisAlignment & mainAxisAlignment
Center(child:)
Container(child:)

Library - (Package in Python, )

Any folder into a library -  Values ----> library values; (libraryname)
        - use import only in library root file. (values.dart)
        part "strings.dart";
        part "colors.dart";
        part "imagepath.dart";
    
    1. strings.dart -----> part of values;(library)
    2. colors.dart -----> part of values;(library)
    3. imagepath.dart -----> part of values;(library)

    Note: import key cannot be used in any part of library

API - Applicaiton package(programming) Interface:
http:// or https://

Web(Mobile) ----> request ---->(internet) API ----> Web Server ----> Database ---> Response ---> Client (App)

CorePHP or (laravel or CodeIgniter) or Python or Atom or Java -- Integrated in Applicaiton


End Point ----> Response ----> Server ----> End Point

local server -- Apache (xampp) -- NodeJS (https://nodejs.org)

Types Server:
    1. Application Server (Cost inefficent) - low level of application (Cpanel - godaddy)
        a) host websites/low level application (spped or performance)
    2. Media Servers (Videos ) -- 1GB (1 million users) -- 100TB --- $9000 - $15000
    3. WebRTC (Stun/Turn) - Peer-to-Peer connection (messaging, video, call)
    4. Signalling Servers

JSON/XML - formats: key:value -----> Map(Dart) or Dict(Python) or Associative array(PHP)

/* 
List: [ {}, {}, { "":[{{{{}}}}]} ] ---> object[0]["key"]

Dict: { { [], [], []} } ----> object["key"]
*/


Core Methods:
    1. GET --> fetch the data
    2. POST ----> id, credentials 
    3. PUT ----> Request the specified url throught PUT 
    4. DELETE ----> 
    5. HEAD ---> Authorization (SECRET KEY and SECRET ID)


Future, Async, Await, Factory, GlobalKey


1. UI
2. HTTP - API
3. JSON local file access
4. Walkthrough Pages ----> OneTime Execution
5. SplashScreens ----> Every time
6. Notification (Push Notification & Local Notification)
7. Application Build
8. Testing
9. PlayStore & App Store hosting
Other Features:
1. Map Integration
2. SMS OTP Integration
3. Firebase Implementation
4. Shared Preferences
















Firebase Setup: (gmail id)
    1. https://console.firebase.google.com/
    2. Create a project over there
    3. Firebase Realtime Analysis - Crashlytics
    4. Register your Android/iOS/Web app
    5. Downloading googleservices.json
    6. update Build.gradle with dependencies
    7. Load plugins in pubspec.yaml (  firebase_core, firebase_auth)
    8. Register and Create app in Onesignal 
    9. Integrate Onesignal with Firebase (collect app ID)

OneSignal APP ID: 2cb1d8a6-2edf-4846-90f8-4012ada0dbe2